import requests
import pandas as pd
import yfinance as yf
from datetime import datetime
import os
from colorama import Fore, Style, init

# Initialize colorama for Windows support
init()

# Load API key from environment variable
API_KEY = os.getenv("FRED_API_KEY", "358278a4ebd546c50212a3e7e65cbb3d")

def get_fed_interest_rates():
    """Fetch latest Fed interest rate data from FRED API"""
    try:
        url = f"https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key={API_KEY}&file_type=json"
        response = requests.get(url).json()
        latest_rate = float(response['observations'][-1]['value'])
        return latest_rate
    except:
        return "Error fetching Fed rates"

def get_yield_curve():
    """Fetch 10-year minus 2-year yield spread from FRED API"""
    try:
        url = f"https://api.stlouisfed.org/fred/series/observations?series_id=T10Y2Y&api_key={API_KEY}&file_type=json"
        response = requests.get(url).json()
        spread = float(response['observations'][-1]['value'])
        return spread
    except:
        return "Error fetching yield curve"

def get_stock_data(tickers):
    """Fetch stock prices and percentage changes"""
    stock_data = {}
    
    for stock, ticker in tickers.items():
        try:
            stock_hist = yf.Ticker(ticker).history(period="2d")
            if len(stock_hist) >= 2:
                prev_close = stock_hist["Close"].iloc[-2]
                latest_close = stock_hist["Close"].iloc[-1]
                percent_change = ((latest_close - prev_close) / prev_close) * 100
                stock_data[stock] = {"price": latest_close, "change": percent_change}
            else:
                stock_data[stock] = {"price": "N/A", "change": "N/A"}
        except:
            stock_data[stock] = {"price": "Error", "change": "Error"}
    
    return stock_data

def print_banner():
    """Prints a rainbow-colored banner with 'RECCTEST'"""
    colors = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]
    text = "RECCTEST"
    rainbow_text = "".join(colors[i % len(colors)] + char for i, char in enumerate(text))
    print(rainbow_text + Style.RESET_ALL)

def run_recession_checklist():
    """Run all recession indicators and display results"""
    print_banner()
    print(f"Date: {datetime.today().strftime('%Y-%m-%d')}\n")
    
    fed_rate = get_fed_interest_rates()
    yield_curve = get_yield_curve()
    
    # Define tickers for hedge funds and key stocks
    tickers = {
        "BlackRock": "BLK",
        "Berkshire Hathaway": "BRK-B",
        "Vanguard": "VOO",
        "Bridgewater": "GLD",
        "S&P 500": "^GSPC",
        "Apple": "AAPL",
        "Tesla": "TSLA",
        "Nvidia": "NVDA",
        "Microsoft": "MSFT",
        "Google": "GOOGL",
        "Amazon": "AMZN",
        "Meta": "META"
    }
    stock_data = get_stock_data(tickers)
    
    # Display Data
    rate_color = Fore.GREEN if fed_rate < 3 else Fore.YELLOW if fed_rate < 5 else Fore.RED
    print(f"1️⃣ Fed Interest Rate: {rate_color}{fed_rate}% (Below 3% = Easy Money, Above 5% = Recession Risk)" + Style.RESET_ALL)
    
    yc_color = Fore.GREEN if yield_curve > 0 else Fore.RED
    print(f"2️⃣ Yield Curve Spread (10Y-2Y): {yc_color}{yield_curve} (Negative = Recession Signal)" + Style.RESET_ALL)
    
    print("\n💼 Hedge Fund Defensive Moves:")
    for fund in ["BlackRock", "Berkshire Hathaway", "Vanguard", "Bridgewater"]:
        data = stock_data.get(fund, {"price": "N/A", "change": "N/A"})
        color = Fore.GREEN if isinstance(data["change"], float) and data["change"] > 0 else Fore.RED
        print(f"   - {fund}: ${data['price']} ({color}{data['change']:.2f}%" + Style.RESET_ALL + ")")
    
    print("\n📈 Stock Market Daily Changes:")
    for stock in ["S&P 500", "Apple", "Tesla", "Nvidia", "Microsoft", "Google", "Amazon", "Meta"]:
        data = stock_data.get(stock, {"price": "N/A", "change": "N/A"})
        color = Fore.GREEN if isinstance(data["change"], float) and data["change"] > 0 else Fore.RED
        print(f"   - {stock}: ${data['price']} ({color}{data['change']:.2f}%" + Style.RESET_ALL + ")")
    
    print("\n======================================")
    
    input("\nPress Enter to exit...")

if __name__ == "__main__":
    run_recession_checklist()

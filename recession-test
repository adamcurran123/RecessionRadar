import requests
import pandas as pd
import yfinance as yf
from datetime import datetime
import os
from colorama import Fore, Style, init

# Initialize colorama for Windows support
init()

# Load API key from environment variable
API_KEY = os.getenv("FRED_API_KEY", "358278a4ebd546c50212a3e7e65cbb3d")

def get_fed_interest_rates():
    """Fetch latest Fed interest rate data from FRED API"""
    try:
        url = f"https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key={API_KEY}&file_type=json"
        response = requests.get(url).json()
        latest_rate = float(response['observations'][-1]['value'])
        return latest_rate
    except:
        return "Error fetching Fed rates"

def get_yield_curve():
    """Fetch 10-year minus 2-year yield spread from FRED API"""
    try:
        url = f"https://api.stlouisfed.org/fred/series/observations?series_id=T10Y2Y&api_key={API_KEY}&file_type=json"
        response = requests.get(url).json()
        spread = float(response['observations'][-1]['value'])
        return spread
    except:
        return "Error fetching yield curve"

def get_hedge_fund_positions():
    """Fetch latest 13F filings for BlackRock, Scion, Berkshire Hathaway"""
    funds = {
        "BlackRock": "BLK",
        "Berkshire Hathaway": "BRK-B"
    }
    fund_positions = {}
    
    for fund, ticker in funds.items():
        try:
            stock = yf.Ticker(ticker)
            fund_positions[fund] = stock.history(period="1mo")["Close"].iloc[-1]
        except:
            fund_positions[fund] = "Error fetching data"
    
    # Scion is a hedge fund, not a publicly traded company, so we use WhaleWisdom
    try:
        url = "https://whalewisdom.com/filer/scion-asset-management-llc"
        response = requests.get(url)
        if response.status_code == 200:
            fund_positions["Scion"] = "13F filings available"
        else:
            fund_positions["Scion"] = "Error fetching data"
    except:
        fund_positions["Scion"] = "Error fetching data"
    
    return fund_positions

def calculate_recession_score(fed_rate, yield_curve, hedge_funds):
    """Calculate a recession probability score from 1 to 10 based on economic indicators."""
    score = 0
    
    # Interest Rate Impact
    if isinstance(fed_rate, float):
        if fed_rate > 5:
            score += 3  # High interest rates indicate tightening conditions
        elif fed_rate > 3:
            score += 2
        elif fed_rate > 1:
            score += 1
    
    # Yield Curve Inversion Impact
    if isinstance(yield_curve, float):
        if yield_curve < 0:
            score += 3  # Negative spread is a classic recession indicator
        elif yield_curve < 0.5:
            score += 2
    
    # Hedge Fund Defensive Moves
    hedge_score = 0
    for fund, position in hedge_funds.items():
        if position == "Error fetching data":
            continue
        if isinstance(position, float) and position < 0:  # If hedge funds are losing value
            hedge_score += 2
    if hedge_score > 2:
        score += 2
    elif hedge_score > 0:
        score += 1
    
    # Normalize score to 1-10 range
    return min(10, max(1, score))

def print_banner():
    """Prints a styled banner with 'RECCTEST'"""
    print(Fore.CYAN + """
 ____  ____  ___  ___  ____  ____  ___  ____ 
(  _ \( ___)/ __)/ __)(_  _)( ___)/ __)(_  _)
 )   / )__)( (__( (__   )(   )__) \__ \  )(  
(_)/ (_)(____)\___)\___) (__) (____)(___/ (__) 
    """ + Style.RESET_ALL)

def run_recession_checklist():
    """Run all recession indicators and display results"""
    print_banner()
    print(f"Date: {datetime.today().strftime('%Y-%m-%d')}\n")
    
    fed_rate = get_fed_interest_rates()
    yield_curve = get_yield_curve()
    hedge_funds = get_hedge_fund_positions()
    
    # Display Data
    rate_color = Fore.GREEN if fed_rate < 3 else Fore.YELLOW if fed_rate < 5 else Fore.RED
    print(f"1️⃣ Fed Interest Rate: {rate_color}{fed_rate}% (Below 3% = Easy Money, Above 5% = Recession Risk)" + Style.RESET_ALL)
    
    yc_color = Fore.GREEN if yield_curve > 0 else Fore.RED
    print(f"2️⃣ Yield Curve Spread (10Y-2Y): {yc_color}{yield_curve} (Negative = Recession Signal)" + Style.RESET_ALL)
    
    print("\n💼 Hedge Fund Defensive Moves:")
    for fund, position in hedge_funds.items():
        print(f"   - {fund}: {position}")
    
    # Calculate Recession Score
    recession_score = calculate_recession_score(fed_rate, yield_curve, hedge_funds)
    print(f"\n⚠️ Recession Probability Score: {Fore.RED if recession_score >= 7 else Fore.YELLOW if recession_score >= 4 else Fore.GREEN}{recession_score}/10" + Style.RESET_ALL)
    print("\n======================================")
    
    input("\nPress Enter to exit...")

if __name__ == "__main__":
    run_recession_checklist()
